{"./":{"url":"./","title":"Introduction","keywords":"","body":"将Gitbook上的书籍发布在GitHubPages上 GitBook 是一个基于 Node.js 的命令行工具，可使用 Markdown 来制作精美的电子书. 但是Gitbook由于网络问题,许多其他人发布的项目不能直接查看,或者保存.但是我们可以通过Github将fork Gitbook 源码到自己的Github,并设置Github Pages 页面访问, 来实现保存Gitbook项目的目的. GitHub Pages 简单说就是一个可以托管静态网站的 Git 项目，支持使用 markdown 语法以及 Jekyll 来构建，或者直接使用已经生成好的静态站点。我们就可以使用GitPages搭建自己的个人博客 由于 gitbook 书籍可以通过gitbook本地构建出 site 格式，所以可以直接将构建好的书籍直接放到 GitHub Pages 中托管，之后，可以通过如下地址访问书籍： .github.io/ 例如：这本书中使用的例子 ‘test’ 项目可以通过地址：chengweiv5.github.io/test来访问。 当访问Garretming.github.io/gitbook时，会访问Garretming/gitbook项目的_gh-pages分支的内容，所以需要为项目创建一个gh-pages分支，并且将静态站点内容放入其中。也就是说，gitbook 项目将有如下两个分支： master, 保存书籍的源码 gh-pages, 保存书籍编译后的 HTML 文件 安装GitBook 安装Gitbook 安装node.js 编译安装或者对应的二进制安装 yum install nodejs 1 安装Gitbook 国内环境建议修改npm源为淘宝镜像站后再安装 npm install gitbook-cli -g gitbook -V 配置gitbook 可以在github上创建一个项目，然后clone到本地，进入项目根目录，执行gitbook init，编辑gitbook.json，SUMMARY.md，README.md，以及.gitignore book.json book.json是gitbook的配置文件，包括插件的配置文件，通过插件可以丰富电子书的功能，有兴趣的可以去官方找找，很多很有意思的插件（插件越多js文件越多，我的vps流量计费，所以我的是乞丐版 T T） Usage Put this in your book.json: { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/your/repo\" } } } And you’re done! --> 贴一下我的book.json cat book.json { \"title\": \"clark's notes\", \"description\": \"好记性不如烂笔头，记录日常遇到的问题及学习的成果\", \"author\": \"clark\", \"output.name\": \"site\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.3\", \"root\": \".\", \"links\": { \"sidebar\": { \"Home\": \"https://huangwj.app\" } }, \"plugins\": \\[ \"github@^2.0.0\", \"edit-link@^2.0.2\", \"anchors@^0.7.1\", \"include-codeblock@^3.0.2\", \"splitter@^0.0.8\", \"tbfed-pagefooter@^0.0.1\", \"expandable-chapters-small@^0.1.7\", \"anchor-navigation-ex@0.1.8\" \\], \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true }, \"github\": { \"url\": \"https://github.com/Garretming/gitbook\" }, \"include-codeblock\": { \"template\": \"ace\", \"unindent\": true, \"edit\": true }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright © clark 2017\", \"modify\\_label\": \"该文件修订时间：\", \"modify\\_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"edit-link\": { \"base\": \"https://github.com/clark/gitbook/edit/master\", \"label\": \"Edit This Page\" }, \"anchor-navigation-ex\": { \"isRewritePageTitle\": false, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } } 编写完成后在book.json文件目录执行如下命令安装插件 gitbook install SUMMARY.md 概要文件主要存放 GitBook 的文件目录信息，左侧的目录就是根据这个文件来生成的，它通过 Markdown 中的列表语法来表示文件的层级关系，下面是一个简单的示例： # Summary * [Introduction](README.md) * [个人简历](ABOUT_ME.md) * [关于博客](ABOUT_BLOG.md) * [知识库](knowledge.md) \\* \\[操作系统\\]\\(OS/os.md\\) \\* \\[Linux\\]\\(OS/linux/linux.md\\) \\* \\[windows\\]\\(OS/win/windows.md\\) \\* \\[Unix\\]\\(OS/unix/unix.md\\) 编写完成后，可以执行init命令让gitbook自动生成上述目录结构 $ gitbook init info: create SUMMARY.md info: initialization is finished README.md 电子书的主页，可以在book.json中修改 .gitignore 由于生成电子书时会产生大量的nodejs文件以及_gitbook的电子书文件，建议配置.gitignore [huangwj@instance-1 ~]$ cat /opt/huangwj/gitbook/.gitignore /_book/ /node_modules/ 生成gitbook电子书 主要配置文件编辑完成后，就可以生成gitbook电子书，默认生成html，可以在本地起服务查看，也可以将html拷贝到web服务器下查看 本地查看，默认端口4000，可以更改 $ gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 41 plugins are installed info: 15 explicitly listed info: loading plugin \"github\"... OK info: loading plugin \"edit-link\"... OK info: loading plugin \"anchors\"... OK info: loading plugin \"include-codeblock\"... OK info: loading plugin \"splitter\"... OK info: loading plugin \"tbfed-pagefooter\"... OK info: loading plugin \"expandable-chapters-small\"... OK info: loading plugin \"anchor-navigation-ex\"... OK info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 26 pages info: found 27 asset files warn: \"options\" property is deprecated, use config.get(key) instead info: >> generation finished with success in 5.0s ! Starting server ... Serving book on http://localhost:4000 部署webhook并与github联动 安装webhookit 安装webhookit，并生成默认配置文件，请注意自己的Python环境，调用相应的pip pip install webhookit webhookit_config > /opt/webhook/webhook_for_github.conf 修改配置文件 ​ 如果执行脚本在webhook本机，只需要修改如下两个参数 repo_name/branch_name修改成自己的项目名称和分支名 SCRIPT写入自己要执行的脚本 [huangwj@instance-1 ~]$ cat /opt/webhook/webhook_for_github.conf # -*- coding: utf-8 -*- ''' Created on May-25-18 19:10:16 @author: hustcc/webhookit ''' # This means: # When get a webhook request from `repo_name` on branch `branch_name`, # will exec SCRIPT on servers config in the array. WEBHOOKIT_CONFIGURE = { \\# a web hook request can trigger multiple servers. 'gitbook/master': \\[{ \\# if exec shell on local server, keep empty. 'HOST': '', \\# will exec shell on which server. 'PORT': '', \\# ssh port, default is 22. 'USER': '', \\# linux user name 'PWD': '', \\# user password or private key. \\# The webhook shell script path. 'SCRIPT': '/opt/huangwj/scripts/gitbook\\_update.sh &gt; /opt/huangwj/scripts/gitbook\\_update.log' }\\] } 我的脚本 [huangwj@instance-1 scripts]$ cat gitbook_update.sh #!/bin/bash source /etc/profile source /home/huangwj/.bash_profile date cd /opt/huangwj/gitbook git pull gitbook install gitbook build 启动webhookit webhookit -c /opt/webhook/webhook_for_github.conf -p port 1 启动完成后即可访问localhost:port查看webhook的信息及推送的URL，在github填入URL并配置type为json即可。 配置github 项目——setting——webhook——ADD webhook payload URL：填写webhookURL Content type ：application/json 触发条件可选，我这里选择的是Just the push event. 编译书籍 首先，创建一个文件夹,用户来存放要编译的书籍. mkdir book & & cd book 将需要编译的数据源码仓库从Github上clone到当前文件夹中. git clone git@github.com:Garretming/gitbook.git 使用gitbook build将书籍内容输出到默认目录，也就是当前目录下的_book目录。 gitbook build build 失败的可能是配置出现了错误,可以根据提示修改book.json 的配置信息.注意:记得修改book.json后提交到github上. git add book.json git commit -m \"update book.json\" git push -u origin master 创建 gh-pages 分支 执行如下命令来创建分支，并且删除不需要的文件： git checkout --orphan gh-pages git rm -f --cached -r . git clean -df rm -rf *~ 现在，目录下应该只剩下_book目录了，首先，忽略一些文件： echo \"*~\" > .gitignore echo \"_book\" >> .gitignore git add .gitignore git commit -m \"Ignore some files\" 然后，加入_book下的内容到分支中： cp -r _book/* . git add . git commit -m \"Publish book\" 上传书籍内容到 GitHub 现在，可以将编译好的书籍内容上传到 GitHub 中book项目的gh-pages分支了，虽然这里还没有创建分支，上传和创建会一步完成！ git push -u origin gh-pages 首先先安装 gh-pages 工具 npm install g gh-pages 1 然后输入以下指令 gh-pages -d _book 现在，书籍的内容已经上传到 GitHub 上，所以通过访问meik-zhanggithub.io/test就可以阅读test这本书了！ 参考此书籍,总结完善后发表本文,并将此本书发布在Github Pages上. Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 17:32:54 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 17:32:54 "},"LIVE/me.html":{"url":"LIVE/me.html","title":"个人简历","keywords":"","body":"test Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"BLOG/ABOUT_BLOG.html":{"url":"BLOG/ABOUT_BLOG.html","title":"关于博客","keywords":"","body":"GitBook关联GitHub github gitbook 想用GitBook的客户端写文档，但是发现不能登录GitBook的帐号，主要目的是想把工作成果保存到网络上避免放在自己电脑上丢失。于是我采用折衷的办法，用GitBook在本机写作，然后把文章保存在GitHub。 1. 下载安装GitBook Editor 链接：https://www.gitbook.com/editor/ 安装后打开，客户端提示登录GitBook帐号。由于我值需要用GitBook Editor做编辑工具，不需要把文章存在GitBook上（根本原因是登录不了，原因你懂）。选Do that later： 由于没有登录，创建的图书都会在存储在本地，而不会传到GitBook网上。GitBook Editor创建的图书默认是在C:\\Users\\用户名\\GitBook目录下，我习惯把资料存在D盘，于是选择菜单栏GitBook Editor - Change Library Path，把目录改成D:\\GitBook： 2. 在本地创建图书 点击New Book创建图书，填写书名，点击确定，创建后图书相关的文件会存储在D:\\GitBook\\Import目录下。相关截图： 注意：由于我在创建图书前将Library Path改成了D:\\GitBook，所以我新建的图书的文件才会存储在D:\\GitBook\\Import目录下。而Import目录是对应GitBook Editor菜单栏的Import命令。经我测试，如果再创建一个D:\\GitBook\\Open目录，对应的就是GitBook Editor菜单栏的Open命令。Import和Open的区别是： Import 可以将从本地其它目录的图书（用 gitbook init 命令创建的图书目录）导入到 Library Path ，导入后修改的文件内容会保存在 Library Path 。比如：在 D:\\test\\hello 目录通过 gitbook init 创建了一本书，然后打开GitBook Editor Import ，选择 D:\\test\\hello ，然后 D:\\test\\hello 目录的文件就会复制到 D:\\GitBook\\Import\\hello 。而在GitBook Editor中修改了内容后，这些内容会保存在 D:\\GitBook\\Import\\hello 目录下。 Open 就是直接打开一个 gitbook init 的图书。经测试，只有在 Library Path 下的 Open 目录下使用 gitbook init 命令创建的图书，才会正常在GitBook Editor中显示。 3. 关联GitHub 在GitBook打开新创建的图书，点击Add an article随便输入点东西。 注意右上角有两个按钮：Save和Publish。当点击Save的时候，GitBook Editor会把编辑的内容保存在Library Path。而当点击Publish的时候，就会把编辑的内容保存到Git仓库（可以是任意的Git仓库：GitHub、码云、oschina...）。如果当前这本存储在本地的图书没有关联Git仓库，GitBook Editor会弹出提示： 那么这时候就需要创建一个Git仓库了。到GitHub创建一个空白的仓库，并复制https的git仓库地址。注意必须使用https的因为GitBook Editor暂时不支持SSH，相关截图： 然后把git仓库地址复制到GitBook Editor，点击Sync，再输入GitHub的帐号密码就OK了，相关截图： 最后检查一下GitHub上时候已经有刚同步上去的文件，如果有就OK了。 接下来就可以开始编辑自己的图书，编辑后记得要点击右上角Publish同步到GitHub。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"BLOG/create.html":{"url":"BLOG/create.html","title":"项目搭建","keywords":"","body":"项目搭建 一、Fork 示例项目 示例项目：https://github.com/zitiaocn/simple 二、项目结构 这里只罗列需要关注的部分，我们的初衷是先以最小的代价将项目跑起来再说，至于优化或进阶的功能后面再去摸索，讲的太多反倒容易让人觉得这个框架很复杂。 images 用于存放图片 README.md 关于文档，在 SUMMARY.md 进行配置 SUMMARY.md 文档目录 book.json 文档框架，最核心的文件 deploy.md 一个示例文档，可以删除 下面重点阐述几个文件： 1、SUMMARY.md 文档的目录结构，所有需要展示的文档都需要在它里面进行罗列。 详细 GitBook 官方英文文档：https://toolchain.gitbook.com/pages.html 注：GitBook 支持文件夹，但是文件夹的根目录下必须要指定文件，否则在前台的菜单中点击父级目录的时候无法展开。比如说有一个文档路径是：xxx.com/simple/create.html 那么 xxx.com/simple/ 必须要对应一个文件，在 SUMMARY.md 里面；否则点击 create.html 父级菜单将不会展开子菜单。 2、book.json 需要注意的参数有 root，就是文档内容的根目录，如果文档结构如下： -- book.json -- docs 就是文档全部放在这个目录下 ----doc1.md ----doc2.md 那么 book.json 中 root 的值应该是 ./docs。 head_title head_description head_keywords 上面三个参数在标准的 GitBook 框架里面没有，是我们自己改造的，就是页面 SEO 相关的 title、description、keywords。 还有一个参数需要留意 prefix，它是通过插件自动生成 sitemap.xml 网站地图的前缀路径，我们当前生成的地图为：http://zitiao.org/deploy/sitemap.xml 其它没有提及的参数保持原样，如果想要深入了解，请参考 GitBook 的官方英文文档：https://toolchain.gitbook.com/config.html 三、修改 book.js 文件 按照上面章节中 book.js 各个字段的含义进行修改，修改成适合自己项目的就可以了。 四、填充文档内容 1、SUMMARY.md 完成目录文档，可以参考本文档的 SUMMARY.md 文件的写法，比较简单，不展开了： https://github.com/zitiaocn/deploy/edit/master/SUMMARY.md 2、撰写具体文档内容 不懂 Git 也没关系，可以直接在 GitHub 的网页端在线编辑。 完成上面的所有工作，下一步就是 项目部署，请看下一章。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"BLOG/run.html":{"url":"BLOG/run.html","title":"运行部署","keywords":"","body":"运行部署 一、将项目拉到服务器 进入到服务器对应目录（本地电脑和远程服务器都可以，我拿我的本地 mac 电脑来演示），并将代码克隆下来，我将项目克隆到我的 wwwroot 目录： vincent4j-mac:wwwroot vincent4j$ git clone git@github.com:zitiaocn/deploy.git 自动打出下面的文字，代表克隆代码成功： Cloning into 'deploy'... remote: Counting objects: 40, done. remote: Compressing objects: 100% (26/26), done. remote: Total 40 (delta 6), reused 36 (delta 5), pack-reused 0 Receiving objects: 100% (40/40), 23.04 KiB | 0 bytes/s, done. Resolving deltas: 100% (6/6), done. Checking connectivity... done. 二、安装环境 1、进入到项目目录 vincent4j-mac:wwwroot vincent4j$ cd deploy vincent4j-mac:deploy vincent4j$ 2、安装依赖环境 npm install gitbook-cli -g 执行完之后，再执行： npm install 上面两个命令执行的时间会比较长，请耐心等待，在这期间会将 Node.js 环境也一并安装。 3、安装 GitBook 模块 gitbook install 会安装所需的所有插件，当自动打印如下文字，代表安装成功： info: >> plugin \"sitemap-general\" installed with success 4、编译文件 依次执行下面三行命令： gitbook build 编译文件，编译后生成的静态文件会放置在 _book 目录。 rm -rf _book_cache cp -r _book _book_cache cp -r _book publish 将编译的文件从 _book 复制到 _book_cache，最终网站运行时是读取 _book_cache 目录下的文件。 5、运行 gitbook serve 当自动打印出如下文字，就代码运行成功： Starting server ... Serving book on http://localhost:4000 在浏览器里访问 http://localhost:4000 就能看到文档了，就可以 乐开怀 咯。 三、注意事项 http://zitiao.org/deploy/ 参考文档 同一台服务器部署多个项目时，只需要安装一次 安装依赖环境。 以下有几种解决方案： 运行gitbook serve . 这个命令在用户退出终端时也会结束。为保持其后台运行须修改为setsid,nohup命令（setsid gitbook serve .）不行 nohup gitbook serve & linux后台运行命令的几种办法https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/index.html [1] 92121 appending output to nohup.out PM2(github.com/Unitech/pm2) Forever (npmjs.org/package/for…) Supervisor (supervisord.org/) Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"BLOG/update.html":{"url":"BLOG/update.html","title":"更新文档","keywords":"","body":"更新文档 一、手动更新 进入到项目路径，依次运行下面的命令： git pull 拉取最新的项目文件 gitbook build 编译文件，编译后生成的静态文件会放置在 _book 目录。 rm -rf _book_cache cp -r _book _book_cache 将编译的文件从 _book 复制到 _book_cache，最终网站运行时是读取 _book_cache 目录下的文件。 二、自动更新 1、在 GitHub 仓库中配置 webhook 2、在服务器上通过程序来接收事件 当代码有提交的时候，GitHub 会往上面的地址推送消息，服务器接收到消息之后，执行 手动更新 里的脚本就可以了。 具体的代码如何实现，就交给公司的研发人员了，我们就不在此细说，因为我也不懂代码，惭愧。 三、注意事项 如果在更新的时候 book.js 发生了变更，需要执行 gitbook install。 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"BLOG/advanced.html":{"url":"BLOG/advanced.html","title":"进阶功能","keywords":"","body":"Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"BLOG/test.html":{"url":"BLOG/test.html","title":"参考","keywords":"","body":"项目介绍 https://www.jianshu.com/p/f81a2509ca89 思路：通过将 Wiki 文档内容的仓库托管在 GitHub 之上，并且将 GitBook 框架的代码放在仓库中 ，然后找一台有 Node.js 环境的服务器，通过简单的几行命令就能部署成功，十分钟内能搞定。从而具备多人协作、版本控制、Markdown 写作、代码高亮、实时更新的特性。 一、效果展示 1、Material Design 中文版（有侧边栏菜单） 页面效果：http://zitiao.org/material-design/ 文档仓库：https://github.com/zitiaocn/material-design 2、GitBook Help Center（无侧边栏菜单） 页面效果：https://help.gitbook.com/ 文档仓库：https://github.com/GitbookIO/help.gitbook.com 二、功能特性 1、页面美观 主要体现在两个方面：其一，页面的外观，请回头看看上面的效果图。其二，链接的格式，如下： GitBook 链接示例：http://zitiao.org/material-design/usability/accessibility.html MDwiki 链接示例：http://dynalon.github.io/mdwiki/#!layout.md （我个人见不得 #、! 之类的字符） 2、多人协作 & 版本控制 文档内容托管于 GitHub 之上，GitHub 本身就具备 多人协作 和 版本控制 的功能。当然所有的 Git 托管平台都可以，比如说国外的 GitLab、Bitbucket，或者国内的 git.oschina.net、coding.net 都行。 如果希望仓库私有，国外产品推荐 Bitbucket，因为他私有仓库免费，而 GitHub 私有仓库收费。国内的好像私有仓库都免费，在安全性和稳定性方面可能不如 Bitbucket。 3、Markdown 写作 文档内容托管于 GitHub 之上，GitHub 本身就具备 Markdown 写作 的功能。 4、代码高亮 通过 GitBook 的插件能很容易支持代码高亮（这就是站在巨人的肩膀上的好处）。 5、实时更新 通过给 GitHub 仓库配置 webhook 进行 push 时的消息推送，能触发服务器实时更新（服务器上需要些代码）。 6、一键部署 只需要简单的几行命令就部署完毕。 三、所需资源 唯一的一个条件就是，一台支持 Node.js 的服务器（公网和内网服务器都行）。 四、交流学习 欢迎加群详聊 如果扫码加群不成功，请添加四勾的个人微信，再由四勾邀请入群，加好友时请填写验证信息「字条网加群」 添加 四勾 4J 个人微信 vincent4j。 via http://4jplus.com Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"OS/knowledge.html":{"url":"OS/knowledge.html","title":"知识库","keywords":"","body":"知识库 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"OS/os.html":{"url":"OS/os.html","title":"操作系统","keywords":"","body":"操作系统 Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:11 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:11 "},"OS/mac/mac.html":{"url":"OS/mac/mac.html","title":"Mac","keywords":"","body":"Mac Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"OS/linux/linux.html":{"url":"OS/linux/linux.html","title":"Linux","keywords":"","body":"Linux Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:10 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:10 "},"OS/win/windows.html":{"url":"OS/win/windows.html","title":"windows","keywords":"","body":"windows Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:11 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:11 "},"OS/unix/unix.html":{"url":"OS/unix/unix.html","title":"Unix","keywords":"","body":"Unix Copyright © clark-xm.xyz 2019 all right reserved，powered by Gitbook该文件修订时间: 2019-05-06 15:16:11 clark®Designer, Frontend Developer & overall web enthusiastCopyright © clark all right reserved, powered by skyFimodified at 2019-05-06 15:16:11 "}}